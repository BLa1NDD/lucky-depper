import streamlit as st, json, time, random, os, uuid

st.set_page_config(
    page_title="Lucky Depper",
    page_icon="üé∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
st.markdown("""
<style>
    [data-testid="stSidebar"] {
        display: block !important;
        visibility: visible !important;
    }
    .css-1d391kg {
        display: block !important;
    }
    
    /* CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–ø–∏—Ä–∞–ª–∏ */
    @keyframes wave {
        0%, 100% { transform: translateY(0px); }
        25% { transform: translateY(-5px); }
        75% { transform: translateY(5px); }
    }
    
    .horizontal-spiral {
        display: inline-block;
        width: 30px;
        height: 8px;
        margin-left: 10px;
        position: relative;
    }
    
    .spiral-dot {
        width: 6px;
        height: 6px;
        background: #3498db;
        border-radius: 50%;
        position: absolute;
        animation: wave 1.5s ease-in-out infinite;
    }
    
    .spiral-dot:nth-child(1) { left: 0px; animation-delay: 0s; }
    .spiral-dot:nth-child(2) { left: 8px; animation-delay: 0.1s; }
    .spiral-dot:nth-child(3) { left: 16px; animation-delay: 0.2s; }
    .spiral-dot:nth-child(4) { left: 24px; animation-delay: 0.3s; }
    
    /* CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –∫–æ–ª–µ—Å–∞ */
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .spinning-wheel {
        display: inline-block;
        width: 150px;
        height: 150px;
        border: 18px solid #e0e0e0;
        border-top: 18px solid #ff6b6b;
        border-right: 18px solid #4ecdc4;
        border-bottom: 18px solid #45b7d1;
        border-left: 18px solid #96ceb4;
        border-radius: 50%;
        margin: 15px auto;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if "session_id" not in st.session_state:
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    restored_session = None
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for filename in os.listdir("."):
        if filename.startswith("user_state_") and filename.endswith(".json"):
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    state_data = json.load(f)
                    if state_data.get("is_logged_in", False):
                        restored_session = state_data.get("session_id")
                        break
            except:
                continue
    
    if restored_session:
        st.session_state.session_id = restored_session
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –∏ —Å–ª—É—á–∞–π–Ω—ã–º —á–∏—Å–ª–æ–º
        st.session_state.session_id = f"{str(uuid.uuid4())}_{int(time.time())}_{random.randint(1000, 9999)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
if "show_toast_until" not in st.session_state:
    st.session_state.show_toast_until = 0
if "last_toast_message" not in st.session_state:
    st.session_state.last_toast_message = ""
if "last_toast_icon" not in st.session_state:
    st.session_state.last_toast_icon = ""
if "show_register" not in st.session_state:
    st.session_state.show_register = False
if "show_spinning_animation" not in st.session_state:
    st.session_state.show_spinning_animation = False
if "show_welcome_message" not in st.session_state:
    st.session_state.show_welcome_message = False
if "welcome_message_time" not in st.session_state:
    st.session_state.welcome_message_time = 0


def generate_user_id():
    #–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return str(uuid.uuid4())

def save_user_to_file(user_id, login, password, balance=1000.0, session_id=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    user_data = {
        "id": user_id,
        "login": login,
        "password": password,
        "balance": balance,
        "session_id": session_id
    }
    filename = f"user_{user_id}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

def load_user_from_file(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ ID"""
    filename = f"user_{user_id}.json"
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

def find_user_by_login(login):
    """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    for filename in os.listdir("."):
        if filename.startswith("user_") and filename.endswith(".json"):
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    user_data = json.load(f)
                    if user_data.get("login") == login:
                        return user_data
            except:
                continue
    return None

def save_user_state(user_id, is_logged_in=False):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥)"""
    state_file = f"user_state_{user_id}.json"
    state_data = {
        "user_id": user_id,
        "is_logged_in": is_logged_in,
        "session_id": st.session_state.session_id if is_logged_in else None,
        "timestamp": int(time.time())
    }
    with open(state_file, "w", encoding="utf-8") as f:
        json.dump(state_data, f, ensure_ascii=False, indent=2)

def load_user_state(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state_file = f"user_state_{user_id}.json"
    if os.path.exists(state_file):
        try:
            with open(state_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            pass
    return None

def main_game():
    global stavka
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Å —Ñ–æ—Ä–º–æ–π –ª–æ–≥–∏–Ω–∞
    st.empty()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ session_id
    current_user = None
    for filename in os.listdir("."):
        if filename.startswith("user_") and filename.endswith(".json"):
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    user_data = json.load(f)
                    if user_data.get("session_id") == st.session_state.session_id:
                        current_user = user_data
                        break
            except:
                continue
    
    if not current_user:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        st.rerun()
    
    st.title("üé∞ Lucky Depper")

    # –°–æ–∑–¥–∞–µ–º —Å–∞–π–¥–±–∞—Ä
    st.sidebar.title("üé∞ Lucky Depper")
    st.sidebar.header("–ü—Ä–æ—Ñ–∏–ª—å")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    st.sidebar.write(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user['login']}")
    st.sidebar.write(f"üí∞ –ë–∞–ª–∞–Ω—Å: {float(current_user['balance'])}")

    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
    if st.sidebar.button("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"):
        current_user["session_id"] = None
        save_user_to_file(current_user["id"], current_user["login"], current_user["password"], current_user["balance"], None)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã—Ö–æ–¥)
        save_user_state(current_user["id"], False)
        
        st.rerun()

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.sidebar.divider()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.sidebar.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.sidebar.write("üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞:")
    st.sidebar.write("‚Ä¢ 1 - 1.5x = 40%")
    st.sidebar.write("‚Ä¢ 5 - 2x = 20%") 
    st.sidebar.write("‚Ä¢ 10 - 2.5x = 10%")
    st.sidebar.write("‚Ä¢ –ö - 3x = 5%")
    st.sidebar.write("‚Ä¢ –ó - 5x = 1%")

    options = ["1", "5", "10", "–ö", "–ó"]

    user_dep = st.selectbox("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ", options)
    num_dep = st.number_input("–†–∞–∑–º–µ—Ä –¥–µ–ø–∞ ", step=0.1)

    now = time.time()

    if st.session_state.show_toast_until > now:
        st.toast(st.session_state.last_toast_message, icon=st.session_state.last_toast_icon)
        st.toast("–ù–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ø–Ω—É—Ç—å —Å–∫–æ—Ä–µ–µ!", icon="üí∞")
        



    if num_dep > current_user["balance"]:
        st.toast("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –î–ï–ü ", icon="‚ùå")
    else:
        if st.button("–î–ï–ü–ù–£–¢–¨"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
            st.session_state.show_spinning_animation = True
            st.rerun()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–∞—â–∞—é—â–µ–µ—Å—è –∫–æ–ª–µ—Å–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        if st.session_state.show_spinning_animation:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç 3 –¥–æ 6 —Å–µ–∫—É–Ω–¥
            spin_time = random.uniform(3, 6)
            
            st.markdown(f"""
            <div style="text-align: center; margin-top: 10px;">
                <div class="spinning-wheel" style="animation: spin {spin_time}s linear infinite;"></div>
                <p style="color: #666; margin-top: 15px; font-size: 16px;">üé∞ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏...</p>
            </div>
            """, unsafe_allow_html=True)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
            time.sleep(spin_time)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã
            dep_ran = random.randint(1 + random.randint(5, 30), 95)
            user_dep_chance = stavka[user_dep][1]
            if dep_ran + user_dep_chance >= 100:
                current_user["balance"] += num_dep * (stavka[user_dep][0]) 
                st.session_state.last_toast_message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∞–ª–∞–Ω—Å: {current_user['balance']} –¥–µ–ø –∫–æ–∏–Ω–æ–≤"
                st.session_state.last_toast_icon = "‚úÖ"
                save_user_to_file(current_user["id"], current_user["login"], current_user["password"], current_user["balance"], current_user["session_id"])
            else:
                current_user["balance"] -= num_dep
                st.session_state.last_toast_message = f"–î–µ–ª–∞–π –î–û–î–ï–ü —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª :( –í–∞—à –±–∞–ª–∞–Ω—Å: {current_user['balance']} –¥–µ–ø –∫–æ–∏–Ω–æ–≤"
                st.session_state.last_toast_icon = "‚ùå"
                save_user_to_file(current_user["id"], current_user["login"], current_user["password"], current_user["balance"], current_user["session_id"])
            
            st.session_state.show_toast_until = time.time() + 2
            st.session_state.show_spinning_animation = False
            st.rerun()






def registr():
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Å –∏–≥—Ä–æ–π
    st.empty()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–ø–∏—Ä–∞–ª—å—é
    st.markdown("""
    <div style="display: flex; align-items: center; justify-content: center;">
        <h1 style="margin: 0;">register please</h1>
        <div class="horizontal-spiral">
            <div class="spiral-dot"></div>
            <div class="spiral-dot"></div>
            <div class="spiral-dot"></div>
            <div class="spiral-dot"></div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    
    input_user_name = st.text_input("üë§ login", placeholder="–í–≤–µ–¥–∏—Ç–µ login", max_chars=18)
    input_password = st.text_input("üîí password", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ password", max_chars=30)
    input_password_confirm = st.text_input("üîí password confirm", type="password", placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", max_chars=30)
    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):  
        if not input_user_name or not input_password:
            st.toast("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", icon="‚ùå")
        elif input_password != input_password_confirm:
            st.toast("–ü–∞—Ä–æ–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è!", icon="‚ùå") 
        elif len(input_user_name) < 3 or len(input_password) < 3:
            st.toast("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–Ω—ã –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤!", icon="‚ùå")      
        else:
            existing_user = find_user_by_login(input_user_name)
            if existing_user:
                st.toast("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", icon="‚ùå")  
            else:
                user_id = generate_user_id()
                save_user_to_file(user_id, input_user_name, input_password, 1000.0, None)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ)
                save_user_state(user_id, False)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                st.session_state.show_register = False
                st.session_state.show_welcome_message = True
                st.session_state.welcome_message_time = time.time() + 2
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                time.sleep(0.1)
                st.rerun()


    if st.button("üîÑ –ù–∞–∑–∞–¥"):
        st.session_state.show_register = False
        st.rerun()






def login():
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Å –∏–≥—Ä–æ–π
    st.empty()
    
    st.markdown("""
    <style>
        @keyframes wave {
            0%, 100% { transform: translateY(0px); }
            25% { transform: translateY(-5px); }
            75% { transform: translateY(5px); }
        }
        
        .horizontal-spiral {
            display: inline-block;
            width: 30px;
            height: 8px;
            margin-left: 10px;
            position: relative;
        }
        
        .spiral-dot {
            width: 6px;
            height: 6px;
            background: #3498db;
            border-radius: 50%;
            position: absolute;
            animation: wave 1.5s ease-in-out infinite;
        }
        
        .spiral-dot:nth-child(1) { left: 0px; animation-delay: 0s; }
        .spiral-dot:nth-child(2) { left: 8px; animation-delay: 0.1s; }
        .spiral-dot:nth-child(3) { left: 16px; animation-delay: 0.2s; }
        .spiral-dot:nth-child(4) { left: 24px; animation-delay: 0.3s; }
    </style>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–ø–∏—Ä–∞–ª—å—é
    st.markdown("""
    <div style="display: flex; align-items: center; justify-content: center;">
        <h1 style="margin: 0;">Hello</h1>
        <div class="horizontal-spiral">
            <div class="spiral-dot"></div>
            <div class="spiral-dot"></div>
            <div class="spiral-dot"></div>
            <div class="spiral-dot"></div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.title("login please")
    input_user_name = st.text_input("üë§ login", placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω", max_chars=18)
    input_password = st.text_input("üîí password", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", max_chars=30)
    if st.button("–í–æ–π—Ç–∏"):     
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
        user = find_user_by_login(input_user_name)

        if user and user["password"] == input_password:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º session_id
            user["session_id"] = st.session_state.session_id
            save_user_to_file(user["id"], user["login"], user["password"], user["balance"], st.session_state.session_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_user_state(user["id"], True)
    
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            st.session_state.show_welcome_message = True
            st.session_state.welcome_message_time = time.time() + 2
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            time.sleep(0.1)
            st.rerun()
        else:
            st.toast("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", icon="‚ùå")
    
    st.markdown("---")
    
    
    st.markdown("""
    <div style="text-align: center; margin-top: 20px; padding: 15px; background-color: #242434; border-radius: 8px;">
        <p style="color: #666; font-size: 14px; margin-bottom: 8px;">–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?</p>
        <p style="color: #1f77b4; font-size: 16px; font-weight: bold; margin: 0;">
           üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä—è–º–æ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
    col1, col2, col3 = st.columns([2.1, 1, 1.5])
    with col2:
        if st.button("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", key="register_btn", help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"):
            st.session_state.show_register = True
            st.rerun()
        
    
    




stavka = {
    "1": [1.5, 40],#–ª–∏—Å—Ç –∏–∑ 1: x , 2: –ø—Ä–æ—Ü–µ–Ω—Ç
    "5": [2, 20],
    "10": [2.5, 10],
    "–ö": [3, 5],
    "–ó": [5, 1]
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
active_user = None
for filename in os.listdir("."):
    if filename.startswith("user_") and filename.endswith(".json"):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                user_data = json.load(f)
                if user_data.get("session_id") == st.session_state.session_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_state = load_user_state(user_data["id"])
                    if user_state and user_state.get("is_logged_in", False):
                        active_user = user_data
                        break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            try:
                os.remove(filename)
            except:
                pass
            continue

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
if active_user:  
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if st.session_state.show_welcome_message and time.time() < st.session_state.welcome_message_time:
        st.toast(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {active_user["login"]}!', icon="‚úÖ")
    elif st.session_state.show_welcome_message and time.time() >= st.session_state.welcome_message_time:
        st.session_state.show_welcome_message = False
    st.empty()
    main_game()
    
else:
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    st.empty()
    
    if st.session_state.show_register:
        registr()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if st.session_state.show_welcome_message and time.time() < st.session_state.welcome_message_time:
            st.toast("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", icon="‚úÖ")
        elif st.session_state.show_welcome_message and time.time() >= st.session_state.welcome_message_time:
            st.session_state.show_welcome_message = False
        
        login()

        
    





